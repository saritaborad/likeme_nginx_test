Host React Website using apache to subfolder
--------------------------------------------
=> make react build 
=> using filezilla upload react build to document roots => /admin_panel directory
=> e.x document root /var/www/piks/public_html
=> create admin_panel folder 
=> copy all content of build to admin_panel 
=> for refreshing issue of react link shows 404
make htaccess file in in root folder of project 

.htaccess file content
------------------------
  RewriteEngine On
  RewriteBase /admin_panel
  RewriteCond %{HTTPS} off
  RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_FILENAME} !-d
  RewriteCond %{REQUEST_FILENAME} !-l
  RewriteRule . /admin_panel/index.html [L]

in apache2.conf add below config 
---------------------------------
<Directory /var/www/piks/public_html/admin_panel>
	Options Indexes FollowSymLinks
	AllowOverride all
	Require all granted
</Directory>

or if we have different virtual host config for our project then add above in virtual host config
--------------------------------------------------------------------------------------------------
<VirtualHost *:80>
    ServerAdmin webmaster@localhost
    ServerName piks.in
    ServerAlias www.piks.in
    DocumentRoot /var/www/piks/public_html/

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
    
    <Directory /var/www/piks/public_html/admin_panel>
      Options Indexes FollowSymLinks
      AllowOverride all
      Require all granted
    </Directory>
</VirtualHost>


-----------------------------
Host nodejs project using pm2 
-----------------------------
=> install nodejs and nvm 
=> sudo apt install nodejs

=> sudo npm install -g pm2

=> zip nodejs project folder
=> upload nodejs zip using filezilla
=> unzip project folder 

pm2 start index.js --name "auth-api"
pm2 list
pm2 monit auth-api 

Installing Apache Web Server
----------------------------
sudo apt install apache2

=> The Apache web server will be operating as a reverse proxy. 
=> Requests to it will be proxied to the backend NodeJS applications, managed by PM2
=> In order for Apache to proxy requests, the following modules must be installed and enabled.

sudo a2enmod proxy
sudo a2enmod proxy_http

To fully enable the modules Apache must be restarted
=> sudo systemctl restart apache2


Configuring Apache to Reverse Proxy to PM2
------------------------------------------
=> to revere proxy requests using Apache use the ProxyPass and ProxyPassReverse directives
<VirtualHost *:80>
    ProxyPreserveHost On

    ProxyPass / http://127.0.0.1:3000/
    ProxyPassReverse / http://127.0.0.1:3000/
</VirtualHost>


-----------------------------------------------------
How to host next js project to subfolder using apache 
-----------------------------------------------------

=> in next.config file put subfolder name as basePath: "/blog" 
=> in package.json "build": "next build && next export" 
=> npm run build => it will return out folder 
=> upload out folder using filezilla to sub folder 
=> then access domain/blog



for node and react project with socket connection apache2 config

<VirtualHost *:80>
    ServerName likeme.live
    ServerAlias likeme.live
    ServerAdmin webmaster@localhost
    Redirect / https://likeme.live/
    DocumentRoot /var/www/html/
    
    ProxyPreserveHost On
    ProxyPass /likeme http://127.0.0.1:5001
    ProxyPassReverse /likeme http://127.0.0.1:5001

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>

<VirtualHost *:443>
    ServerName likeme.live
    ServerAlias likeme.live
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/html/
    
    SSLEngine on
    Include /etc/letsencrypt/options-ssl-apache.conf
    SSLCertificateFile /etc/letsencrypt/live/likeme.live/fullchain.pem
    SSLCertificateKeyFile /etc/letsencrypt/live/likeme.live/privkey.pem
    
    ProxyPass /likeme http://127.0.0.1:5001
    ProxyPassReverse /likeme http://127.0.0.1:5001

    ProxyPass /likeme/socket.io http://127.0.0.1:5001/likeme/socket.io
    ProxyPassReverse /likeme/socket.io http://127.0.0.1:5001/likeme/socket.io

    RewriteEngine On
    RewriteCond %{HTTP:Upgrade} =websocket [NC]
    RewriteRule /likeme/socket.io/(.*) ws://127.0.0.1:5001/likeme/socket.io/$1 [P,L]

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>


index file for hosting both react and nodejs project and socket

const express = require("express");
const app = express();
const cors = require("cors");
const session = require("express-session");
const { connectDB } = require("./config/db");
const indexRouter = require("./routes/index");
const errorHandler = require("./middleware/error");
const Upload = require("./routes/Upload");
const cookieParser = require("cookie-parser");
require("dotenv").config();
const { Server } = require("socket.io");
const http = require("http").Server(app);
const PORT = process.env.PORT || 5011;
let origin = process.env.PRODUCTION == 1 ? process.env.REACT_LIVE_URL : process.env.REACT_LOCAL_URL;

const path = require("path");
const socketApis = require("./socketApi");
connectDB();
var currentConnections = [];

app.use(cors({ origin: origin, credentials: true }));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());
app.use(session({ secret: process.env.SESSION_SECRET, resave: false, saveUninitialized: false, cookie: { maxAge: 3600000 * 24 } }));

app.use("/uploads", express.static(path.resolve(__dirname, "uploads")));
app.use("/upload", Upload);
app.use("/api", indexRouter);
app.use(express.static(path.resolve(__dirname, "../frontend/build")));
app.use("*", (req, res) => {
 res.sendFile(path.join(__dirname, "../frontend/build", "index.html"));
});
app.use(errorHandler);

const io = new Server(http, { path: "/likeme/socket.io" });

io.on("connection", (socket) => {
 // store socket of current connected user [ZIgMvcpU09A7ksk2AAAB:{client:<Socket_obj>}]
 currentConnections[socket.id] = { client: socket };
 console.log(`socket connected to ${socket.id}`);

 socketApis(socket, currentConnections, io);
});

http.listen(PORT, () => console.log(`server is listening on http://localhost:${PORT}`));
