=> closure 
  - javascript feature that allows function to remember the variable from outer scope even after that scope has finished executing.
  - a closure allows a function to maintain access to the variables of its containing (enclosing) function, even when the containing function has completed execution.

function outerFunction() {
  let outerVariable = 'I am from the outer function';

  function innerFunction() {
    console.log(outerVariable); // Accessing outerVariable from the outer scope
  }

  return innerFunction;
}

const closureExample = outerFunction();
closureExample(); // This will log: "I am from the outer function"


var:
Function Scope: Variables declared with var are function-scoped. 
- only accessible within the function where they are declared. 
- If declared outside any function, they become global variables.

Hoisting: Variables declared with var are hoisted to the top of their scope,
 which means they are moved to the top of the function or global context during the compilation phase.

Reassignment and Redefinition: Variables declared with var can be both reassigned and redefined.

let:
Block Scope: 
- Variables declared with let are block-scoped. 
- They are only accessible within the block (enclosed by curly braces) where they are defined, whether that block is a loop, condition, or a function.

Hoisting: Like var, variables declared with let are hoisted to the top of their block, 
but the temporal dead zone prevents accessing them before the declaration.

Reassignment: Variables declared with let can be reassigned, but not redefined.

const:
Block Scope: Like let, variables declared with const are block-scoped.

Hoisting: const is also hoisted, but just like let, it's not accessible in the temporal dead zone.

Reassignment and Redefinition: Variables declared with const cannot be reassigned or redefined. However, for objects and arrays declared with const, the properties or elements inside them can be modified.

Temporal Dead Zone (TDZ):-
- concept in JavaScript that refers to the time span between the entering of the scope where a variable is declared and the actual declaration of the variable. During this period, any attempt to access the variable results in a ReferenceError.

This concept is particularly relevant for variables declared using let and const because they exhibit block scoping behavior.

For let and const, the TDZ starts at the beginning of the block where the variable is declared and continues until the actual declaration. During this period, any attempt to access or reference the variable results in an error
In the case of var, it is hoisted to the top of its scope, and the variable is accessible throughout the entire scope, even before the actual declaration. 

Synthetic Events:
Synthetic events in React are events that are normalized by React to ensure consistent behavior across different browsers. React wraps the native browser events in its own synthetic event system. This system is designed to abstract away the differences in event handling between various browsers, providing a consistent and predictable interface for handling events in React components.

Native (Non-Synthetic) Events:
Native events refer to the browser's native event system. These events are provided by the browser and are not normalized or abstracted by React. When you use native events, you directly interact with the browser's event system.

setTimeout:
Usage:

setTimeout is used to execute a function or a piece of code once after a specified delay.

setInterval:
Usage:

setInterval is used to repeatedly execute a function or a piece of code at a specified interval.